<style lang="scss">
  page {
    overflow: hidden
  }
  .form-cell__ctrl {
    .form-cell__bd & {
      text-align: right;
    }
    .form-cell__ft & {
      display: inline-block;
      width: 80rpx;
      vertical-align: middle;
    }
  }
  slider {
    margin: 10rpx;
  }
  .swiper {
    padding: 0 40rpx;
    height: 218rpx;
    position: relative;
    image {
      width: 100%;
      height: 100%;
    }
    &:before {
      content: " ";
      display: inline-block;
      height: 6px;
      width: 6px;
      border-width: 0 0 2px 2px;
      border-color: #C8C8CD;
      border-style: solid;
      -webkit-transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
      transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
      position: absolute;
      z-index: 10;
      top: 50%;
      margin-top: -4px;
      left: 2px;
    }
    &:after {
      content: " ";
      display: inline-block;
      height: 6px;
      width: 6px;
      border-width: 2px 2px 0 0;
      border-color: #C8C8CD;
      border-style: solid;
      -webkit-transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
      transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
      position: absolute;
      z-index: 10;
      top: 50%;
      margin-top: -4px;
      right: 2px;
    }
  }
</style>

<template>
  <card-editor :toggle.sync="toggle" :image.sync="image" :code.sync="code" :width.sync="cWidth" :height.sync="cheight" :complete.sync="complete" />
  <scroll-view scroll-y="{{true}}" scroll-into-view="{{offsetView}}" style="height:{{windowHeight}}px;" hidden="{{complete}}">
    <!-- 背景 -->
    <view class="cells cells_form" id="image">
      <view class="cell cell_collapse{{toggle === 'image' ? ' cell_collapse_show' : ''}}" data-toggle="image" @tap="setToggle">
        <view class="cell__hd">背景</view>
        <view class="cell__bd"></view>
        <view class="cell__ft"></view>
      </view>
      <view class="form-cell">
        <view class="form-cell__bd">
          <swiper class="swiper" bindchange="bindSwiperChange">
            <repeat for="{{templates}}">
              <swiper-item>
                <image src="{{item.image}}" mode="aspectFit" />
              </swiper-item>
            </repeat>
          </swiper>
        </view>
      </view>
      <view class="form-cell">
        <view class="form-cell__bd">
          <upload-image type="local" :value.sync="image" />
        </view>
      </view>
    </view>
    <!-- Logo -->
    <repeat for="{{['logo']}}">
      <view class="cells cells_form" id="{{item}}">
        <view class="cell cell_collapse{{toggle === item ? ' cell_collapse_show' : ''}}" data-toggle="{{item}}" @tap="setToggle">
          <view class="cell__hd">{{codeMap[item].label}}</view>
          <view class="cell__bd"></view>
          <view class="cell__ft"></view>
        </view>
        <view class="form-cell form-cell_switch">
          <view class="form-cell__bd">显示</view>
          <view class="form-cell__ft">
            <switch checked="{{code[item].display === 'block'}}" data-field="{{item}}" bindchange="bindSwitchChange" color="#1875f0" />
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">left</view>
          <view class="form-cell__bd"></view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['left']}}" data-field="{{item}}" data-key="left" bindblur="keyInput" placeholder="0" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">top</view>
          <view class="form-cell__bd"></view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['top']}}" data-field="{{item}}" data-key="top" bindblur="keyInput" placeholder="0" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">宽度</view>
          <view class="form-cell__bd">
            <slider min="10" max="{{cWidth}}" value="{{code[item]['width']}}" data-field="{{item}}" data-key="width" bindchange="keyInput" />
          </view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['width']}}" data-field="{{item}}" data-key="width" bindblur="keyInput" placeholder="10" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">高度</view>
          <view class="form-cell__bd">
            <slider min="10" max="{{cHeight}}" value="{{code[item]['height']}}" data-field="{{item}}" data-key="height" bindchange="keyInput" />
          </view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['height']}}" data-field="{{item}}" data-key="height" bindblur="keyInput" placeholder="10" /> px
          </view>
        </view>
      </view>
    </repeat>
    <!-- 文本 -->
    <repeat for="{{['name', 'job', 'tel', 'company', 'address', 'email']}}">
      <view class="cells cells_form" id="{{item}}">
        <view class="cell cell_collapse{{toggle === item ? ' cell_collapse_show' : ''}}">
          <view class="cell__hd">{{codeMap[item].label}}</view>
          <view class="cell__bd">
            <input class="form-cell__ctrl" type="text" value="{{code[item]['value']}}" data-field="{{item}}" data-key="value" bindblur="keyInput" placeholder="请输入您的{{codeMap[item].label}}" />
          </view>
          <view class="cell__ft" data-toggle="{{item}}" @tap="setToggle"></view>
        </view>
        <view class="form-cell form-cell_switch">
          <view class="form-cell__bd">显示</view>
          <view class="form-cell__ft">
            <switch checked="{{code[item].display === 'block'}}" data-field="{{item}}" bindchange="bindSwitchChange" color="#1875f0" />
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">left</view>
          <view class="form-cell__bd"></view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['left']}}" data-field="{{item}}" data-key="left" bindblur="keyInput" placeholder="0" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">top</view>
          <view class="form-cell__bd"></view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['top']}}" data-field="{{item}}" data-key="top" bindblur="keyInput" placeholder="0" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">宽度</view>
          <view class="form-cell__bd">
            <slider min="10" max="{{cWidth}}" value="{{code[item]['width']}}" data-field="{{item}}" data-key="width" bindchange="keyInput" />
          </view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['width']}}" data-field="{{item}}" data-key="width" bindblur="keyInput" placeholder="10" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">字体大小</view>
          <view class="form-cell__bd">
            <slider min="10" max="64" value="{{code[item]['font-size']}}" data-field="{{item}}" data-key="font-size" bindchange="keyInput" />
          </view>
          <view class="form-cell__ft">
            <input class="form-cell__ctrl" type="number" value="{{code[item]['font-size']}}" data-field="{{item}}" data-key="font-size" bindblur="keyInput" placeholder="13" /> px
          </view>
        </view>
        <view class="form-cell">
          <view class="form-cell__hd">字体颜色</view>
          <view class="form-cell__bd">
            <input class="form-cell__ctrl" type="text" value="{{code[item]['color']}}" data-field="{{item}}" data-key="color" bindblur="keyInput" placeholder="#595959" />
          </view>
          <view class="form-cell__ft"></view>
        </view>
      </view>
    </repeat>
    <view class="btn-area">
      <button type="primary" @tap="create">生成电子名片</button>
    </view>
  </scroll-view>
  <scroll-view style="height:{{windowHeight}}px;" hidden="{{!complete}}">
    <view class="btn-area" style="position:relative;top:100%;margin-top:-250rpx;">
      <button type="primary" @tap="download">点击下载图片</button>
      <button type="default" @tap="reset">返回上一步</button>
    </view>
  </scroll-view>
</template>

<script>
  import wepy from 'wepy'
  import ConfigMixin from '../mixins/config'
  import UploadImageComponent from '@Components/upload-image'
  import CardEditorComponent from '@Components/business-card-editor'
  export default class CardsEdit extends wepy.page {
    config = {
      navigationBarTitleText: '电子名片'
    }
    mixins = [ConfigMixin]
    components = {
      'card-editor': CardEditorComponent,
      'upload-image': UploadImageComponent
    }
    data = {
      templates: [{
        image: '../images/business-card-background/business-card_4.jpg',
        logo: 'display:block;left:155rpx;top:28rpx;width:95rpx;height:95rpx;',
        name: 'display:block;left:155rpx;top:162rpx;width:324rpx;height:36rpx;color:#463618;font-size:36rpx;',
        job: '',
        tel: 'display:block;left:205rpx;top:258rpx;width:280rpx;height:18rpx;color:#b1901b;font-size:18rpx;',
        company: 'display:block;left:155rpx;top:125rpx;width:500rpx;height:28rpx;color:#b1901b;font-size:28rpx;',
        address: 'display:block;left:205rpx;top:225rpx;width:280rpx;height:18rpx;color:#b1901b;font-size:18rpx;',
        email: 'display:block;left:230rpx;top:290rpx;width:250rpx;height:18rpx;color:#b1901b;font-size:18rpx;'
      }, {
        image: '../images/business-card-background/business-card_5.png',
        logo: 'display:block;left:517rpx;top:40rpx;color:#eeeeee;width:114rpx;height:114rpx;',
        name: 'display:block;left:80rpx;top:48rpx;width:360rpx;height:36rpx;color:#ffffff;font-size:36rpx;',
        job: 'display:block;left:80rpx;top:93rpx;width:360rpx;height:26rpx;color:#3dc4df;font-size:26rpx;',
        tel: 'display:block;left:115rpx;top:145rpx;width:360rpx;height:20rpx;color:#eeeeee;font-size:20rpx;',
        company: 'display:block;left:115rpx;top:234rpx;width:360rpx;height:20rpx;color:#eeeeee;font-size:20rpx;',
        address: 'display:block;left:115rpx;top:285rpx;width:360rpx;height:20rpx;color:#eeeeee;font-size:20rpx;',
        email: 'display:block;left:115rpx;top:192rpx;width:360rpx;height:20rpx;color:#eeeeee;font-size:20rpx;'
      }],
      complete: false,
      toggle: '',
      offsetView: '',
      textAlignRange: ['left', 'center', 'right', 'justify'],
      image: '',
      code: {},
      cWidth: 345,
      cHeight: 170,
      codeMap: {
        logo: {
          label: '头像',
          value: ''
        },
        name: {
          label: '姓名',
          value: '我的名字'
        },
        job: {
          label: '职业',
          value: '我的职业'
        },
        tel: {
          label: '手机',
          value: '13800138000'
        },
        company: {
          label: '公司',
          value: '公司名称'
        },
        address: {
          label: '地址',
          value: '我的地址'
        },
        email: {
          label: '邮箱',
          value: '10000@qq.com'
        }
      }
    }
    methods = {
      setToggle(e) { // 折叠面板
        this.$invoke('card-editor', 'setToggle', e)
      },
      bindSwitchChange(e) { // 显示隐藏
        const {
          field
        } = e.currentTarget.dataset
        this.code[field].display = e.detail.value ? 'block' : 'none'
        let obj = this.$invoke('card-editor', 'cssToObj', this.code[field]['style'])
        obj['display'] = this.code[field].display
        this.code[field]['style'] = this.$invoke('card-editor', 'objToCss', obj)
      },
      bindSwiperChange(e) { // 默认模版选择
        const { current } = e.detail
        this.getCode(current)
      },
      keyInput(e) { // 样式修改
        const {
          field,
          key
        } = e.currentTarget.dataset
        const {
          value
        } = e.detail
        let obj = this.$invoke('card-editor', 'cssToObj', this.code[field]['style'])
        switch (key) {
          case 'left':
          case 'top':
            this.code[field][key] = parseFloat(value)
            break
          case 'value': // 防止重置XY
            this.code[field][key] = obj['content'] = value.trim()
            break
          case 'text-align':
            this.code[field][key] = obj[key] = this.textAlignRange[value]
            break
          case 'width': // 修正left
            const cWidth = this.cWidth
            let width = parseFloat(value) || 10
            width = width < 10 ? 10 : width
            width = width > cWidth ? cWidth : width
            if (this.code[field].left + width > cWidth) {
              this.code[field].left = cWidth - width
            }
            this.code[field][key] = obj[key] = width
            break
          case 'height': // 修正top
            const cHeight = this.cHeight
            let height = parseFloat(value) || 10
            height = height < 10 ? 10 : height
            height = height > cHeight ? cHeight : height
            if (this.code[field].top + height > cHeight) {
              this.code[field].top = cHeight - height
            }
            this.code[field][key] = obj[key] = height
            break
          case 'font-size':
            let fontSize = parseFloat(value) || 13
            fontSize = fontSize < 9 ? 9 : fontSize
            fontSize = fontSize > 64 ? 64 : fontSize
            this.code[field]['height'] = obj['height'] = this.code[field][key] = obj[key] = fontSize
            break
          default:
            this.code[field][key] = obj[key] = value
        }
        // 重新生成style
        this.code[field]['style'] = this.$invoke('card-editor', 'objToCss', obj)
        this.$apply()
      },
      create() { // 名片代码合成
        this.$invoke('card-editor', 'create')
      },
      download() {
        this.$invoke('card-editor', 'download')
      },
      reset() {
        this.complete = false
      }
    }
    watch = {
      toggle(curVal, oldVal) {
        setTimeout(() => {
          this.offsetView = curVal
          this.$apply()
        })
      }
    }
    onRoute() {
      wepy.showLoading({ mask: true })
      wepy.getUserInfo({
        withCredentials: false,
        success: res => {
          const { userInfo } = res
          this.$parent.download(userInfo['avatarUrl']).then(filePath => {
            this.codeMap.logo.value = filePath
            this.codeMap.name.value = userInfo['nickName']
            this.getCode()
            wepy.hideLoading()
          })
        },
        fail: res => {
          const { errMsg } = res
          switch (errMsg) {
            case 'getUserInfo:fail auth deny':
              wepy.navigateTo({ url: 'authorize' })
              break
          }
          wepy.showToast({
            icon: 'loading',
            title: '加载失败'
          })
        }
      })
    }
    getCode(index = 0) {
      const template = this.templates[index]
      let { image, code } = this.getStyle(template)
      for (let k in code) {
        Object.assign(code[k], this.codeMap[k])
      }
      this.code = code
      this.image = image
      this.$apply()
    }
    // 获取style
    getStyle(template) {
      let image = ''
      let code = {}
      for (let item in template) {
        switch (item) {
          case 'image':
            image = template[item]
            break
          case 'id':
            code[item] = template[item]
            break
          default:
            code[item] = this.$invoke('card-editor', 'cssToObj', template[item])
            // 将(top|right|bottom|left)提取出来
            // ASCII表 | \55 - | \72 : | \73 ; |
            // let styles = template[item].replace(/(?<!\55)(top|right|bottom|left)\72\w+\73/g, '')
            let style = template[item].replace(/(\w+\55)?(top|right|bottom|left)\72\w+\73/g, res => {
              if (/(\w+\55)(top|right|bottom|left)/.test(res)) {
                return res
              } else {
                return ''
              }
            })
            // 将rpx转px
            style = this.$invoke('card-editor', 'cssToObj', style)
            // 重新获取style
            code[item]['style'] = this.$invoke('card-editor', 'objToCss', style)
        }
      }
      return {
        image,
        code
      }
    }
  }
</script>
