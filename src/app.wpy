<style type="scss" src="app.scss" />

<script>
  import wepy from 'wepy'
  // import 'wepy-async-function'
  export default class extends wepy.app {
    config = {
      pages: [
        'pages/user-index',
        'pages/user-create',
        'pages/user-qr-code',
        'pages/user-share',
        'pages/user-settings',
        'pages/user-product-select',
        'pages/user-product-card',
        'pages/user-product-video',
        'pages/user-product-news',
        'pages/folder-index',
        'pages/folder-detail',
        'pages/folder-add',
        'pages/folder-create',
        'pages/folder-group',
        'pages/folder-group-select',
        'pages/folder-groups',
        'pages/folder-groups-create',
        'pages/log-list',
        'pages/log-create',
        'pages/cards-index',
        'pages/cards-create',
        'pages/cards-edit',
        'pages/niche-index',
        'pages/niche-detail',
        'pages/niche-refresh',
        'pages/more-index',
        'pages/more-redeem-code',
        'pages/more-redeem-list',
        'pages/more-order-list',
        'pages/more-order-detail',
        'pages/more-about',
        'pages/more-account',
        'pages/more-news-list',
        'pages/more-certification',
        'pages/library-index',
        'pages/library-detail',
        'pages/library-payment',
        'pages/authorize',
        'pages/message'
      ],
      window: {
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#ffffff',
        navigationBarTitleText: '名片侠',
        navigationBarTextStyle: 'black'
      },
      tabBar: {
        color: '#7b7b7b',
        selectedColor: '#1875f0',
        backgroundColor: '#ffffff',
        borderStyle: '#d9d9d9',
        list: [{
          iconPath: 'images/tabBarIcon/00.png',
          selectedIconPath: 'images/tabBarIcon/00_active.png',
          pagePath: 'pages/user-index',
          text: '我的名片'
        }, {
          iconPath: 'images/tabBarIcon/01.png',
          selectedIconPath: 'images/tabBarIcon/01_active.png',
          pagePath: 'pages/folder-index',
          text: '名片夹'
        }, {
          iconPath: 'images/tabBarIcon/02.png',
          selectedIconPath: 'images/tabBarIcon/02_active.png',
          pagePath: 'pages/library-index',
          text: '名片库'
        }, {
          iconPath: 'images/tabBarIcon/03.png',
          selectedIconPath: 'images/tabBarIcon/03_active.png',
          pagePath: 'pages/niche-index',
          text: '商机中心'
        }, {
          iconPath: 'images/tabBarIcon/04.png',
          selectedIconPath: 'images/tabBarIcon/04_active.png',
          pagePath: 'pages/more-index',
          text: '更多'
        }]
      }
    }
    globalData = {
      // 测试环境
      host: 'https://card-test.51simuhui.com',
      api: 'https://card-test.51simuhui.com/api',
      // 正式环境
      // host: 'https://card.e-yunduan.com',
      // api: 'https://card.e-yunduan.com/api',
      receiving: false, // 是否正在获取token
      token: '',
      userInfo: null,
      code: null,
      cardInfo: null,
      cardStyle: []
    }
    constructor() {
      super()
      // 这东西不兼容IOS 10.0.1
      // this.use('promisify')
      this.use('requestfix')
    }
    onLaunch() {}
    onLoad() {}
    getMyTemplates() {
      let {
        cardStyle
      } = this.globalData
      if (cardStyle.length > 0) {
        return new Promise((resolve, reject) => {
          resolve(cardStyle)
        })
      } else {
        const URL = '/card/my-templates'
        return this.get(URL).then(res => {
          const {
            data
          } = res
          let cardStyle = []
          data.forEach(element => {
            let cardStyleItem = Object.assign({}, {
              id: +element.id
            }, element.code)
            cardStyle.push(cardStyleItem)
          })
          return cardStyle
        })
      }
    }
    getTemplateById(templateID) {
      return this.getMyTemplates().then(cardStyle => {
        let template = {}
        for (let k in cardStyle) {
          if (cardStyle[k].id === templateID) {
            template = cardStyle[k]
          }
        }
        return template
      })
    }
    _login() {
      let {
        code,
        userInfo
      } = this.globalData
      return new Promise((resolve, reject) => {
        if (code && userInfo) {
          resolve({
            code,
            userInfo
          })
        } else {
          wepy.login({
            success: res => {
              this.globalData.code = res.code
              wepy.getUserInfo({
                success: loginInfo => {
                  this.globalData.userInfo = loginInfo.userInfo
                  resolve({
                    code: this.globalData.code,
                    userInfo: this.globalData.userInfo
                  })
                },
                fail: errmsg => {
                  wepy.navigateTo({
                    url: 'authorize'
                  })
                  reject(errmsg)
                }
              })
            }
          })
        }
      })
    }
    _getToken() {
      const {
        api,
        token,
        receiving
      } = this.globalData
      return new Promise((resolve, reject) => {
        if (receiving) { // 请求中
          console.log('token请求中,等待1s后重新发送新的请求')
          setTimeout(() => {
            resolve(this._getToken())
          }, 1000)
        } else if (token) { // 如果缓存有token，直接获取缓存中的token
          resolve(token)
        } else { // 否者，重新登录获取新的token
          this.globalData.receiving = true
          this._login().then(loginInfo => {
              const {
                code,
                userInfo: {
                  nickName,
                  avatarUrl,
                  gender
                }
              } = loginInfo
              // 获取token
              wepy.request({
                url: `${api}/card/user-login`,
                method: 'POST',
                data: {
                  code: code,
                  nickname: nickName,
                  avatar_url: avatarUrl,
                  gender: gender
                },
                success: res => {
                  const {
                    data
                  } = res
                  this.globalData.receiving = false
                  this.globalData.userID = data.data.id
                  this.globalData.token = data.data.token
                  console.log('成功获取token：', this.globalData.token)
                  resolve(this.globalData.token)
                },
                fail: msg => {
                  console.log(msg)
                }
              })
            },
            fail => {
              // 授权失败
              console.log('授权失败')
            })
        }
      })
    }
    _request(method, url, params, header = {}) {
      const {
        api
      } = this.globalData
      return new Promise((resolve, reject) => {
        this._getToken().then(token => {
          wepy.request({
            url: `${api}${url}?access-token=${token}`,
            method: method,
            data: params,
            header: Object.assign({
              'content-type': 'application/json'
            }, header),
            success: res => {
              const {
                data
              } = res
              if (data.code === 401) {
                this.globalData.code = ''
                this.globalData.userinfo = ''
                this.globalData.token = ''
                resolve(this._request(method, url, params))
              } else {
                resolve(data)
              }
            }
          })
        })
      })
    }
    get(url, params = {}, header = {}) {
      return this._request('GET', url, params, header)
    }
    post(url, params = {}, header = {}) {
      return this._request('POST', url, params, header)
    }
    put(url, params = {}, header = {}) {
      return this._request('PUT', url, params, header)
    }
    delete(url, params = {}, header = {}) {
      return this._request('DELETE', url, params, header)
    }
    uploadFile(filePath, type = 'image', name = 'file') {
      const {
        api
      } = this.globalData
      return new Promise((resolve, reject) => {
        this._getToken().then(token => {
          const url = `${api}/card/upload-file?file_type=${type}&access-token=${token}`
          wepy.uploadFile({
            url,
            name,
            filePath,
            success: res => {
              const { code, data, message } = JSON.parse(res.data)
              if (code === 0 && data) {
                resolve(data)
              } else {
                reject(message)
              }
            },
            fail: res => {
              reject(res)
            }
          })
        })
      })
    }
    cardScan(tempFilePath) {
      const {
        api
      } = this.globalData
      return new Promise((resolve, reject) => {
        this._getToken().then(token => {
          wepy.showLoading({ mask: true })
          wepy.uploadFile({
            url: `${api}/card/scan?access-token=${token}`,
            name: 'file',
            filePath: tempFilePath,
            success: res => {
              wepy.hideLoading()
              const { code, data, message } = JSON.parse(res.data)
              if (code === 0 && data) {
                resolve(data)
              } else {
                reject(message)
              }
            }
          })
        })
      })
    }
    download(url) {
      return new Promise((resolve, reject) => {
        wepy.downloadFile({
          url: url,
          success: res => {
            resolve(res.tempFilePath)
          },
          fail: res => {
            reject(res)
          }
        })
      })
    }
  }
</script>
